{"version":3,"sources":["CodeInput.js","CodeList.js","App.js","serviceWorker.js","index.js"],"names":["isDigit","c","classifyRoomCode","code","noses","match","length","houses","chinese","checkCodeErrors","i","charAt","CodeInput","name","setCode","errors","className","type","id","value","onChange","target","toUpperCase","autoComplete","map","e","key","CodeListError","Error","solvedResult","codesWithUnknowns","solvedCodes","replaceAll","str","find","replace","RegExp","digitsAndChars","digits","Set","chars","add","extractMapping","codes","mapping","Map","j","size","digit","values","next","char","has","get","set","getAllPotentialCodes","resultList","getAllPotentialCodesHelper","push","firstChar","digitStr","toString","translatedCode","checkGroupProperties","roomList","validCodes","code1","room","twoUnknownCodes","forEach","twoUnknownCode","concat","oneCodeSolver","code2","twoCodeSolver","code3","undefined","threeCodeSolver","ResultCodes","useStateWithLocalStorage","useState","localStorage","getItem","tryGetItem","setValue","useEffect","setItem","trySetItem","CodeList","error","setCode1","setCode2","setCode3","message","App","href","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.df875191.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function isDigit(c) {\n  return (c >= '0' && c <= '9');\n}\n\nexport function classifyRoomCode(code) {\n  const noses = (code.match(/N/g) || []).length;\n  const houses = (code.match(/H/g) || []).length;\n  const chinese =  (code.match(/C/g) || []).length;\n\n  if (noses === 3 && houses === 2 && chinese === 0) {\n    return \"C\";\n  }\n  if (noses === 2 && houses === 2 && chinese === 1) {\n    return \"N\";\n  }\n  if (noses === 3 && houses === 1 && chinese === 1) {\n    return \"H\";\n  }\n}\n\nexport function checkCodeErrors(code) {\n  if (code.length < 8) {\n    return [\"Too short\"];\n  }\n\n  if (code.length > 8) {\n    return [\"Too long\"];\n  }\n\n  for (let i = 0; i < code.length; i++) {\n    const c = code.charAt(i);\n    if (!isDigit(c) && c !== 'C' && c !== 'N' && c !== 'H') {\n      return [`Invalid character: ${c}`]\n    }\n  }\n\n  const room = classifyRoomCode(code);\n  if (!room) {\n    return [`Code does not match room pattern; check it's entered correctly`]\n  }\n\n  return [];\n}\n\nfunction CodeInput({code, name, setCode}) {\n  const errors = checkCodeErrors(code);\n\n  return (\n    <div className=\"CodeForm\">\n      <input type=\"text\" id={name} name={name} value={code} onChange={({target: {value}}) => setCode(value.toUpperCase())} autoComplete=\"on\" />\n      {errors && code !== \"\" && <ul>{errors.map((e, i) => <li key={i}>{e}</li>)}</ul>}\n    </div>\n  );\n}\n\nexport default CodeInput;\n","import React, {useState, useEffect} from \"react\";\nimport CodeInput, {checkCodeErrors, classifyRoomCode, isDigit} from \"./CodeInput\";\n\nclass CodeListError extends Error {}\n\nfunction solvedResult(codesWithUnknowns, solvedCodes) {\n  return {codesWithUnknowns, solvedCodes}\n}\n\nfunction replaceAll(str, find, replace) {\n  return str.replace(new RegExp(find, 'g'), replace);\n}\n\nfunction digitsAndChars(code) {\n  const digits = new Set();\n  const chars = new Set();\n  for (let i = 0; i < code.length; i++) {\n    const c = code.charAt(i);\n    if (isDigit(c)) {\n      digits.add(c);\n    } else {\n      chars.add(c);\n    }\n  }\n\n  return [digits, chars];\n}\n\nfunction extractMapping(codes) {\n  const mapping = new Map();\n  for (let i = 0; i < 8; i++) {\n    const digits = new Set();\n    const chars = new Set();\n    for (let j = 0; j < codes.length; j++) {\n      const c = codes[j].charAt(i);\n      if (isDigit(c)) {\n        digits.add(c);\n      } else {\n        chars.add(c);\n      }\n    }\n\n    if (digits.size > 1) {\n      throw new CodeListError(`Conflicting digits on position ${i+1}`);\n    }\n\n    if (chars.size > 1) {\n      throw new CodeListError(`Conflicting chars on position ${i+1}`);\n    }\n\n    if (digits.size !== 1 || chars.size !== 1) {\n      continue;\n    }\n\n    const digit = digits.values().next().value;\n    const char = chars.values().next().value;\n    if (mapping.has(char) && mapping.get(char) !== digit) {\n      throw new CodeListError(`Two translations for: ${char}: ${digit} && ${mapping.get(char)}`);\n    }\n    mapping.set(char, digit);\n  }\n\n  return mapping;\n}\n\nfunction getAllPotentialCodes(code) {\n  const resultList = [];\n  getAllPotentialCodesHelper(code, resultList);\n  return resultList;\n}\n\nfunction getAllPotentialCodesHelper(code, resultList) {\n  const [digits, chars] = digitsAndChars(code)\n  if (chars.size === 0) {\n    resultList.push(code);\n    return;\n  }\n\n  const firstChar = chars.values().next().value;\n  for (let i = 0; i < 10; i++) {\n    const digitStr = i.toString()\n    if (digits.has(digitStr)) {\n      continue;\n    }\n\n    const translatedCode = replaceAll(code, firstChar, digitStr);\n    if (chars.size === 1) {\n      resultList.push(translatedCode);\n    } else {\n      getAllPotentialCodesHelper(translatedCode, resultList);\n    }\n  }\n}\n\nfunction oneCodeSolver(code1) {\n  const room = classifyRoomCode(code1);\n  if (!room) {\n    throw new CodeListError(\"Code could not be classified by room; check entry\");\n  }\n\n  const [digits] = digitsAndChars(code1);\n\n  if (room === \"C\") {\n    return solvedResult([code1], getAllPotentialCodes(code1))\n  }\n\n  let twoUnknownCodes = [];\n  let solvedCodes = [];\n  digits.forEach((digit) => {\n    const twoUnknownCode = replaceAll(code1, room, digit);\n    twoUnknownCodes.push(twoUnknownCode);\n    solvedCodes = solvedCodes.concat(getAllPotentialCodes(twoUnknownCode));\n  })\n\n  return solvedResult(twoUnknownCodes, solvedCodes);\n}\n\nfunction twoCodeSolver(code1, code2) {\n  const mapping = extractMapping([code1, code2]);\n\n  if (mapping.size !== 2) {\n    throw new CodeListError(\"Missing mapping for one character, check code entry\");\n  }\n\n  let code = code1;\n  mapping.forEach((digit, char) => code = replaceAll(code, char, digit));\n  return solvedResult([code], getAllPotentialCodes(code))\n}\n\nfunction threeCodeSolver(code1, code2, code3) {\n  const mapping = extractMapping([code1, code2, code3]);\n\n  if (mapping.size !== 3) {\n    throw new CodeListError(\"Missing mapping for one character, check code entry\");\n  }\n\n  let code = code1;\n  mapping.forEach((digit, char) => code = replaceAll(code, char, digit));\n  return solvedResult(undefined, [code])\n}\n\nfunction checkGroupProperties(codes) {\n  const roomList = [], validCodes = [];\n\n  for (let i = 0; i < codes.length; i++) {\n    const code = codes[i];\n    if (checkCodeErrors(code).length !== 0) {\n      continue;\n    }\n    validCodes.push(code);\n    roomList.push(classifyRoomCode(code));\n  }\n\n  if (validCodes.length === 0) {\n    return;\n  }\n\n  if ((new Set(validCodes)).size !== validCodes.length) {\n    throw new CodeListError(\"Duplicate Codes\");\n  }\n\n  if ((new Set(roomList)).size !== roomList.length) {\n    throw new CodeListError(\"Got codes from the same type of room; check they're entered correctly.\");\n  }\n\n  if (validCodes.length === 1) {\n    return oneCodeSolver(validCodes[0]);\n  } else if (validCodes.length === 2) {\n    return twoCodeSolver(validCodes[0], validCodes[1]);\n  }\n\n  return threeCodeSolver(validCodes[0], validCodes[1], validCodes[2]);\n}\n\nfunction ResultCodes({codes}) {\n  if (!codes) {\n    return \"\";\n  }\n\n  if (codes.solvedCodes && codes.solvedCodes.length === 1) {\n  return (\n    <div className=\"ResultCodes\">\n      Code: <strong>{codes.solvedCodes[0]}</strong>\n    </div>\n  );\n\n  }\n  return (\n      <div className=\"ResultCodes\">\n        {codes.codesWithUnknowns && <div><div>The codes with unknowns are:</div><div><ul className=\"CodesWithUnknowns\">{codes.codesWithUnknowns.map((c, i) => <li key={i}>{c}</li>)}</ul></div></div>}\n        {codes.solvedCodes && <div><p>There are {codes.solvedCodes.length} potential codes:</p><div className=\"Codes\">{codes.solvedCodes.map((c, i) => <section key={i}>\n          <div>{c}</div></section>)}</div></div>}\n     </div>\n  );\n}\n\nfunction tryGetItem(key) {\n  try {\n    return localStorage.getItem(key);\n  } catch (e) {}\n}\n\nfunction trySetItem(key, value) {\n  try {\n    return localStorage.setItem(key, value);\n  } catch (e) {}\n}\n\nfunction useStateWithLocalStorage(key) {\n  const [value, setValue] = useState(\n    tryGetItem(key) || ''\n  );\n\n  useEffect(() => {\n    trySetItem(key, value);\n  }, [key, value]);\n\n  return [value, setValue];\n}\n\n\nfunction CodeList() {\n  const [code1, setCode1] = useStateWithLocalStorage(\"code1\");\n  const [code2, setCode2] = useStateWithLocalStorage(\"code2\");\n  const [code3, setCode3] = useStateWithLocalStorage(\"code3\");\n\n  let error, codes;\n  try {\n    codes = checkGroupProperties([code1, code2, code3]);\n  } catch (e) {\n    if (e instanceof CodeListError) {\n      error = e.message;\n    } else {\n      error = \"Unknown\";\n    }\n  }\n\n  return (\n    <div className=\"CodeList\">\n      <form name=\"CodeInputs\">\n        <CodeInput key=\"code1\" name=\"code1\" code={code1} setCode={setCode1} />\n        <CodeInput key=\"code2\" name=\"code2\" code={code2} setCode={setCode2} />\n        <CodeInput key=\"code3\" name=\"code3\" code={code3} setCode={setCode3} />\n      </form>\n      {error && <ul className=\"Errors\"><li>{error}</li></ul>}\n      <ResultCodes codes={codes}/>\n    </div>\n  );\n}\n\nexport default CodeList;\n","import React from 'react';\nimport './App.css';\nimport CodeList from \"./CodeList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Stadium Code Solver</h1>\n      </header>\n        <div className=\"Instructions\">\n          Instructions: To get the 8 digit code to the Stadium Easter Egg (which launches fireworks, and gives you a blueprint), enter each code you find in a game into a text field below. Longer description of where/how to get codes can be found <a href=\"https://www.youtube.com/watch?v=GGJGbwQ8rtU\">in this video</a>. Use \"H\" for the one that looks like a house,\n            \"N\" for the one that looks like a nose, and \"C\" for the one that looks like a Chinese character. For example, you can enter: 64NNH1NH, 6C2NH1NH and 6CNNH1N3.\n        </div>\n        <div className=\"Instructions\">\n            This calculator works with 1, 2 or 3 codes; the more you get, the less typing you'll have to do into the final pad. With one code, you'll have either 42 or 126 potential keys, 2 codes yields exactly 6, and 3 codes will solve it to 1. All of these are brute forceable in the general time limits of a plunder match, though typing all 126 can be frustrating, especially in an active warzone.\n        </div>\n        <CodeList/>\n        <footer>\n            Thanks to <a href=\"https://www.twitch.tv/geekypastimes\">GeekyPastimes</a> for publishing info on the codes. Drop him a like & subscribe.\n        </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}