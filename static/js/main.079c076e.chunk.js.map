{"version":3,"sources":["CodeForm.js","CodeList.js","App.js","serviceWorker.js","index.js"],"names":["isDigit","c","classifyRoomCode","code","noses","match","length","houses","chinese","checkCodeErrors","i","charAt","CodeForm","setCode","errors","className","type","value","onChange","target","toUpperCase","map","e","key","replaceAll","str","find","replace","RegExp","digitsAndChars","digits","Set","chars","add","extractMapping","codes","mapping","Map","j","size","digit","values","next","char","has","get","set","getAllPotentialCodes","resultList","getAllPotentialCodesHelper","push","firstChar","digitStr","toString","translatedCode","checkGroupProperties","roomList","validCodes","console","log","code1","room","potentialCodes","forEach","concat","oneCodeSolver","code2","mappingResult","dir","twoCodeSolver","code3","threeCodeSolver","ResultCodes","CodeList","useState","setCode1","setCode2","setCode3","App","href","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.079c076e.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function isDigit(c) {\n  return (c >= '0' && c <= '9');\n}\n\nexport function classifyRoomCode(code) {\n  const noses = (code.match(/N/g) || []).length;\n  const houses = (code.match(/H/g) || []).length;\n  const chinese =  (code.match(/C/g) || []).length;\n\n  if (noses === 3 && houses === 2 && chinese === 0) {\n    return \"C\";\n  }\n  if (noses === 2 && houses === 2 && chinese === 1) {\n    return \"N\";\n  }\n  if (noses === 3 && houses === 1 && chinese === 1) {\n    return \"H\";\n  }\n}\n\nexport function checkCodeErrors(code) {\n  if (code.length < 8) {\n    return [\"Too short\"];\n  }\n\n  if (code.length > 8) {\n    return [\"Too long\"];\n  }\n\n  for (let i = 0; i < code.length; i++) {\n    const c = code.charAt(i);\n    if (!isDigit(c) && c !== 'C' && c !== 'N' && c !== 'H') {\n      return [`Invalid character: ${c}`]\n    }\n  }\n\n  const room = classifyRoomCode(code);\n  if (!room) {\n    return [`Code does not match room pattern; check it's entered correctly`]\n  }\n\n  return [];\n}\n\nfunction CodeForm({code, setCode}) {\n  const errors = checkCodeErrors(code);\n\n  return (\n    <div className=\"Code\">\n      <input type=\"text\" value={code} onChange={({target: {value}}) => setCode(value.toUpperCase())} />\n      {errors && code !== \"\" && <ul>{errors.map((e, i) => <li key={i}>{e}</li>)}</ul>}\n    </div>\n  );\n}\n\nexport default CodeForm;\n","import React, {useState} from \"react\";\nimport CodeForm, {checkCodeErrors, classifyRoomCode, isDigit} from \"./CodeForm\";\n\nfunction replaceAll(str, find, replace) {\n  return str.replace(new RegExp(find, 'g'), replace);\n}\n\nfunction digitsAndChars(code) {\n  const digits = new Set();\n  const chars = new Set();\n  for (let i = 0; i < code.length; i++) {\n    const c = code.charAt(i);\n    if (isDigit(c)) {\n      digits.add(c);\n    } else {\n      chars.add(c);\n    }\n  }\n\n  return [digits, chars];\n}\n\nfunction extractMapping(codes) {\n  const mapping = new Map();\n  for (let i = 0; i < codes[0].length; i++) {\n    const digits = new Set();\n    const chars = new Set();\n    for (let j = 0; j < codes.length; j++) {\n      const c = codes[j].charAt(i);\n      if (isDigit(c)) {\n        digits.add(c);\n      } else {\n        chars.add(c);\n      }\n    }\n\n    if (digits.size > 1) {\n      return [[`Conflicting digits on position ${i+1}`], []];\n    }\n\n    if (chars.size > 1) {\n      return [[`Conflicting chars on position ${i+1}`], []];\n    }\n\n    if (digits.size !== 1 || chars.size !== 1) {\n      continue;\n    }\n\n    const digit = digits.values().next().value;\n    const char = chars.values().next().value;\n    if (mapping.has(char) && mapping.get(char) !== digit) {\n      return [[`Two translations for: ${char}: ${digit} && ${mapping.get(char)}`], []];\n    }\n    mapping.set(char, digit);\n  }\n\n  return [[], mapping];\n}\n\nfunction getAllPotentialCodes(code) {\n  const resultList = [];\n  getAllPotentialCodesHelper(code, resultList);\n  return resultList;\n}\n\nfunction getAllPotentialCodesHelper(code, resultList) {\n  const [digits, chars] = digitsAndChars(code)\n  if (chars.size === 0) {\n    resultList.push(code);\n    return;\n  }\n\n  const firstChar = chars.values().next().value;\n  for (let i = 0; i < 10; i++) {\n    const digitStr = i.toString()\n    if (digits.has(digitStr)) {\n      continue;\n    }\n\n    const translatedCode = replaceAll(code, firstChar, digitStr);\n    if (chars.size === 1) {\n      resultList.push(translatedCode);\n    } else {\n      getAllPotentialCodesHelper(translatedCode, resultList);\n    }\n  }\n}\n\nfunction oneCodeSolver(code1) {\n  console.log(code1);\n\n  const room = classifyRoomCode(code1);\n  if (!room) {\n    return [[\"Code could not be classified by room; check entry\"], []];\n  }\n\n  const [digits] = digitsAndChars(code1);\n\n  if (room === \"C\") {\n    console.log(code1);\n    return [[], getAllPotentialCodes(code1)];\n  }\n\n  const potentialCodes = [];\n  digits.forEach((digit) => {\n    potentialCodes.concat(getAllPotentialCodes(replaceAll(code1, room, digit)))\n  })\n\n  return [[], potentialCodes];\n}\n\nfunction twoCodeSolver(code1, code2) {\n  const mappingResult = extractMapping([code1, code2]);\n\n  if (mappingResult[0].length > 0) {\n    return mappingResult;\n  }\n\n  const mapping = mappingResult[1];\n\n  console.dir(mapping);\n  if (mapping.size !== 2) {\n    return [[`Missing mapping for one character, check code entry`], []];\n  }\n\n  let code = code1;\n  mapping.forEach((digit, char) => code = replaceAll(code, char, digit));\n  return [[], getAllPotentialCodes(code)];\n}\n\nfunction threeCodeSolver(code1, code2, code3) {\n  const mappingResult = extractMapping([code1, code2, code3]);\n\n  if (mappingResult[0].length > 0) {\n    return mappingResult;\n  }\n\n  const mapping = mappingResult[1];\n\n  if (mapping.size !== 3) {\n    return [[`Missing mapping for one character, check code entry`], []];\n  }\n\n  let code = code1;\n  mapping.forEach((digit, char) => code = replaceAll(code, char, digit));\n  return [[], [code]];\n}\n\nfunction checkGroupProperties(codes) {\n  const roomList = [], validCodes = [];\n  console.log(codes);\n\n  for (let i = 0; i < codes.length; i++) {\n    const code = codes[i];\n    if (checkCodeErrors(code).length !== 0) {\n      continue;\n    }\n    validCodes.push(code);\n    roomList.push(classifyRoomCode(code));\n  }\n\n  console.log(validCodes);\n\n\n  if (validCodes.length === 0) {\n    return [[], []];\n  }\n\n  if ((new Set(validCodes)).size !== validCodes.length) {\n    return [[\"Duplicate Codes\"], []]\n  }\n\n  if ((new Set(roomList)).size !== roomList.length) {\n    return [[\"Got codes from the same type of room; check they're entered correctly.\"], []]\n  }\n\n  if (validCodes.length === 1) {\n    return oneCodeSolver(validCodes[0]);\n  } else if (validCodes.length === 2) {\n    return twoCodeSolver(validCodes[0], validCodes[1]);\n  }\n\n  return threeCodeSolver(validCodes[0], validCodes[1], validCodes[2]);\n}\n\nfunction ResultCodes({codes}) {\n  if (codes.length === 0) {\n    return \"\";\n  }\n\n  return (\n      <div className=\"ResultCodes\">\n        <p>The number of codes is: {codes.length}</p>\n        <ul className=\"Codes\">{codes.map((c, i) => <li key={i}>{c}</li>)}</ul>\n      </div>\n  );\n}\n\nfunction CodeList() {\n  const [code1, setCode1] = useState(\"\");\n  const [code2, setCode2] = useState(\"\");\n  const [code3, setCode3] = useState(\"\");\n\n  const [errors, codes] = checkGroupProperties([code1, code2, code3]);\n  return (\n    <div className=\"CodeList\">\n      <CodeForm key=\"code1\" code={code1} setCode={setCode1} />\n      <CodeForm key=\"code2\" code={code2} setCode={setCode2} />\n      <CodeForm key=\"code3\"  code={code3} setCode={setCode3} />\n      {errors && <ul className=\"Errors\">{errors.map((e, i) => <li key={i}>{e}</li>)}</ul>}\n      <ResultCodes codes={codes}/>\n    </div>\n  );\n}\n\nexport default CodeList;\n","import React from 'react';\nimport './App.css';\nimport CodeList from \"./CodeList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Stadium Code Solver</h1>\n      </header>\n        <div className=\"Instructions\">\n          Instructions: Enter each code you find in a game into a text field below. Use \"H\" for the one that looks like a house,\n            \"N\" for the one that looks like a nose\", and \"C\" for the one that looks like a Chinese character.\n        </div>\n        <CodeList/>\n        <footer>\n            Thanks to <a href=\"https://www.twitch.tv/geekypastimes\">GeekyPastimes</a> for publishing info on the codes. Drop him a like & subscribe.\n        </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}